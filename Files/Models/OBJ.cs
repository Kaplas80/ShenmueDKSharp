using ShenmueDKSharp.Files.Models._OBJ;
using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShenmueDKSharp.Files.Models
{
    /// <summary>
    /// Wavefront OBJ format
    /// </summary>
    public class OBJ : BaseModel
    {
        public static bool EnableBuffering = false;
        public override bool BufferingEnabled => EnableBuffering;

        public OBJ(BaseModel model)
        {
            model.CopyTo(this);
            FilePath = Path.ChangeExtension(model.FilePath, "obj");
        }
        public OBJ(string filepath)
        {
            Read(filepath);
        }
        public OBJ(Stream stream)
        {
            Read(stream);
        }
        public OBJ(BinaryReader reader)
        {
            Read(reader);
        }

        protected override void _Read(BinaryReader reader)
        {
            throw new NotImplementedException();
        }

        protected override void _Write(BinaryWriter writer)
        {
            int totalVertices = 0;
            int objNum = 0;

            MTL mtl = new MTL(this);
            if (String.IsNullOrEmpty(FilePath))
            {
                //TODO: Make this somehow better
                throw new ArgumentException("Filepath was not given.");
            }

            string mtlPath = "";
            string dir = Path.GetDirectoryName(FilePath);
            if (String.IsNullOrEmpty(dir) || dir == "\\" || Path.GetExtension(FilePath) == ".OBJ" || Path.GetExtension(FilePath) == ".obj")
            {
                mtlPath = Path.ChangeExtension(FilePath, ".mtl");
            }
            else
            {
                mtlPath = String.Format("{0}\\{1}", Path.GetDirectoryName(FilePath), Path.ChangeExtension(FilePath, ".mtl"));
            }
            mtl.Write(mtlPath);

            CultureInfo cultureInfo = new CultureInfo("en-GB");

            writer.WriteASCII("# OBJ Generated by ShenmueDKSharp\n");

            writer.WriteASCII(String.Format("mtllib {0}\n", Path.GetFileName(mtlPath)));

            foreach (ModelNode node in RootNode.GetAllNodes())
            {
                Matrix4 transformMatrix = node.GetTransformMatrix();

                writer.WriteASCII(String.Format("o obj_{0}\n", objNum));

                foreach (MeshFace face in node.Faces)
                {
                    //TODO: assign textures to groups
                    uint textureIndex = face.TextureIndex;
                    Texture texture = face.Material.Texture;

                    Vertex[] vertices = face.GetVertexArray(node);

                    for (int i = 0; i < vertices.Length; i++)
                    {
                        vertices[i].Position = Vector3.TransformPosition(vertices[i].Position, transformMatrix);
                    }

                    if (vertices[0].HasVertex())
                    {
                        for (int i = 0; i < vertices.Length; i++)
                        {
                            writer.WriteASCII(String.Format(cultureInfo, "v {0:F6} {1:F6} {2:F6}\n", vertices[i].PosX, vertices[i].PosY, vertices[i].PosZ));
                        }
                    }

                    if (vertices[0].HasUV())
                    {
                        for (int i = 0; i < vertices.Length; i++)
                        {
                            writer.WriteASCII(String.Format(cultureInfo, "vt {0:F6} {1:F6}\n", vertices[i].U, vertices[i].V));
                        }
                    }

                    if (vertices[0].HasNormal())
                    {
                        for (int i = 0; i < vertices.Length; i++)
                        {
                            writer.WriteASCII(String.Format(cultureInfo, "vn {0:F6} {1:F6} {2:F6}\n", vertices[i].NormX, vertices[i].NormY, vertices[i].NormZ));
                        }
                    }

                    writer.WriteASCII(String.Format("usemtl mat_{0}\n", textureIndex));
                    //writer.WriteASCII("s 1\n");
                    if (face.Type == MeshFace.PrimitiveType.Triangles)
                    {
                        for (int i = 1; i < face.VertexIndices.Length + 1; i += 3)
                        {
                            int index = i + totalVertices;
                            writer.WriteASCII(String.Format(GetVertexFormatString(vertices[i]), index, index + 1, index + 2));
                        }
                    }
                    else if (face.Type == MeshFace.PrimitiveType.TriangleStrip)
                    {
                        for (int i = 1; i < face.VertexIndices.Length - 1; i++)
                        {
                            int index = i + totalVertices;
                            if ((i & 1) == 1)
                            {
                                writer.WriteASCII(String.Format(GetVertexFormatString(vertices[i]), index, index + 1, index + 2));
                            }
                            else
                            {
                                writer.WriteASCII(String.Format(GetVertexFormatString(vertices[i]), index, index + 2, index + 1));
                            }
                        }
                    }
                    objNum++;
                    totalVertices += vertices.Length;
                }
            }
            writer.WriteASCII(String.Format("# Total Verts: {0}\n", totalVertices));
        }

        private string GetVertexFormatString(Vertex vertex)
        {
            if (vertex.HasVertex())
            {
                if (vertex.HasNormal())
                {
                    if (vertex.HasUV())
                    {
                        return "f {0}/{0}/{0} {1}/{1}/{1} {2}/{2}/{2}\n";
                    }
                    else
                    {
                        return "f {0}//{0} {1}//{1} {2}//{2}\n";
                    }
                }
                else
                {
                    return "f {0} {1} {2}\n";
                }
            }
            return "";
        }
    }
}
