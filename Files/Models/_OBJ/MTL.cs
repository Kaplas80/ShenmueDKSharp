using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ShenmueDKSharp.Files.Models._OBJ
{
    /// <summary>
    /// Wavefront OBJ format
    /// </summary>
    public class MTL : BaseFile
    {
        public static bool EnableBuffering = false;
        public override bool BufferingEnabled => EnableBuffering;

        BaseModel Model;

        public MTL(BaseModel model)
        {
            Model = model;
        }
        public MTL(string filepath)
        {
            Read(filepath);
        }
        public MTL(Stream stream)
        {
            Read(stream);
        }
        public MTL(BinaryReader reader)
        {
            Read(reader);
        }

        protected override void _Read(BinaryReader reader)
        {
            throw new NotImplementedException();
        }

        protected override void _Write(BinaryWriter writer)
        {
            writer.WriteASCII("# MTL Generated by ShenmueDKSharp\n");
            for (int i = 0; i < Model.Textures.Count; i++)
            {
                Texture texture = Model.Textures[i];

                writer.WriteASCII(String.Format("newmtl mat_{0}\n", i));

                writer.WriteASCII("Ns 0.000000\n");
                writer.WriteASCII("Ka 1.000000 1.000000 1.000000\n");
                writer.WriteASCII("Kd 0.800000 0.800000 0.800000\n");
                writer.WriteASCII("Ks 0.200000 0.200000 0.200000\n");
                writer.WriteASCII("Ke 0.0 0.0 0.0\n");
                writer.WriteASCII("Ni 1.450000\n");
                writer.WriteASCII("d 1.000000\n");
                writer.WriteASCII("illum 1\n");

                string textureName = String.Format("tex_{0}.bmp", i);
                if (String.IsNullOrEmpty(FilePath))
                {
                    //TODO: Make this somehow better
                    throw new ArgumentException("Filepath was not given.");
                }

                string texturePath = "";
                string dir = Path.GetDirectoryName(FilePath);
                if (String.IsNullOrEmpty(dir) || dir == "\\")
                {
                    texturePath = textureName;
                }
                else
                {
                    texturePath = String.Format("{0}\\{1}", Path.GetDirectoryName(FilePath), textureName);
                    string texDir = Path.GetDirectoryName(texturePath);
                    if (!String.IsNullOrEmpty(texDir))
                    {
                        if (!Directory.Exists(texDir))
                        {
                            Directory.CreateDirectory(texDir);
                        }
                    }
                }

                Bitmap bmp = texture.Image.CreateBitmap();
                bmp.RotateFlip(RotateFlipType.RotateNoneFlipY);
                using (MemoryStream memory = new MemoryStream())
                {
                    using (FileStream fs = new FileStream(texturePath, FileMode.Create, FileAccess.ReadWrite))
                    {
                        bmp.Save(memory, ImageFormat.Bmp);
                        byte[] bytes = memory.ToArray();
                        fs.Write(bytes, 0, bytes.Length);
                    }
                }
                writer.WriteASCII(String.Format("map_Kd {0}\n\n", textureName));
            }
        }

    }
}
